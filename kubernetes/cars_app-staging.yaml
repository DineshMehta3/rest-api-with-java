apiVersion: apps/v1 
kind: Deployment
metadata:
  name: cars-deployment-web
spec:
  selector:
    matchLabels:
      app: cars_web
  replicas: 1
  template:
    metadata:
      labels:
        app: cars_web
    spec:
      containers:
      - name: web-server
        image: tombatchelor/cars_web:3.0
        ports:
        - name: cars-web-port
          containerPort: 80
        volumeMounts:
        - name: zipkin-config
          mountPath: /etc/nginx/zipkin
          readOnly: true
      volumes:
      - name: zipkin-config
        configMap:
          defaultMode: 420
          name: zipkin-nginx-config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-insurance-go
spec:
  selector:
    matchLabels:
      app: car_insurance
  replicas: 1
  template:
    metadata:
      labels:
        app: car_insurance
    spec:
      containers:
      - name: insurance-quoter
        image: tombatchelor/car-insurance:3.0
        ports:
        - name: http
          containerPort: 8000
        env:
        - name: ZIPKIN_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: zipkin-config
              key: zipkin.endpoint
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: car-loan-dotnet
spec:
  selector:
    matchLabels:
      app: car_loan
  replicas: 1
  template:
    metadata:
      labels:
        app: car_loan
    spec:
      containers:
      - name: loan-quoter
        image: tombatchelor/car-loan:3.0
        ports:
        - name: http
          containerPort: 80
        env:
        - name: ZIPKIN_ENDPOINT
          valueFrom:
            configMapKeyRef:
              name: zipkin-config
              key: zipkin.endpoint
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-session-manager-deployment
spec:
  selector:
    matchLabels:
      app: redis_session_manager
  replicas: 1
  template:
    metadata:
      labels:
        app: redis_session_manager
    spec:
      containers:
      - name: redis
        image: redis:5.0
        ports:
        - name: redis
          containerPort: 6379
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: cars-prometheus-deployment
spec:
  selector:
    matchLabels:
      app: cars_prometheus
  replicas: 1
  template:
    metadata:
      labels:
        app: cars_prometheus
    spec:
      serviceAccountName: prometheus-cars-app
      containers:
      - name: prometheus
        image: prom/prometheus:v2.10.0
        args:
        - --config.file=/etc/prometheus/prometheus.yaml
        ports:
        - containerPort: 9090
          protocol: TCP
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 420
          name: prometheus-config
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: cars-loadgen-deployment
spec:
  selector:
    matchLabels:
      app: cars_loadgen
  replicas: 1
  template:
    metadata:
      labels:
        app: cars_loadgen
    spec:
      containers:
      - name: jmeter
        image: tombatchelor/carsloadgen:3.3
        args:
        - -n -t /tests/SuperCars.jmx
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
spec:
  selector:
    matchLabels:
      app: jenkins
  replicas: 1 
  template:
    metadata:
      labels:
        app: jenkins
    spec:
      serviceAccountName: marshaller
      containers:
      - name: jenkins
        image: tombatchelor/jenkins:4.2
        imagePullPolicy: Always
        ports:
        - name: jenkins-ui
          containerPort: 8080
        volumeMounts:
        - name: jenkins-config
          mountPath: /tmp/secrets
        - name: dockersock
          mountPath: "/var/run/docker.sock"
        env:
        - name: GIT_ROOT
          valueFrom:
            configMapKeyRef:
              name: jenkins-env
              key: git.root
        - name: CUSTOMER_ID
          valueFrom:
            configMapKeyRef:
              name: marshaller
              key: customer.id
        - name: TOKEN
          valueFrom:
            secretKeyRef:
              name: observe-key
              key: token
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-cred
              key: access-key
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-cred
              key: secret-key
        lifecycle:
          postStart:
            exec:
              command:
              - /bin/sh
              - -c
              - cp /tmp/secrets/*.xml /var/jenkins_home/
      volumes:
      - name: jenkins-config
        secret:
          secretName: jenkins-config
      - name: dockersock
        hostPath:
          path: /var/run/docker.sock
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kops.k8s.io/instancegroup
                operator: NotIn
                values:
                - yolo 
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: cleanup
spec:
  schedule: "0 */6 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: cleanup
            image: tombatchelor/carscleanup:4.2
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: access-key
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-cred
                  key: secret-key
            - name: BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: aws
                  key: bucket.name
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: database.username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-connection
                  key: database.password
          restartPolicy: OnFailure
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kops.k8s.io/instancegroup
                    operator: NotIn
                    values:
                    - yolo 
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: marshaller
spec:
  schedule: "0 13 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: apply-data
            imagePullPolicy: Always
            image: tombatchelor/demo_marshaller:3.6
            env:
            - name: COLLECTOR_URL
              valueFrom:
                configMapKeyRef:
                  name: marshaller
                  key: collector.url
            - name: CUSTOMER_ID
              valueFrom:
                configMapKeyRef:
                  name: marshaller
                  key: customer.id
            - name: TOKEN
              valueFrom:
                secretKeyRef:
                  name: observe-key
                  key: token
            - name: GIT_ROOT
              valueFrom:
                configMapKeyRef:
                  name: jenkins-env
                  key: git.root
            volumeMounts:
            - name: git-key
              mountPath: /keys
          restartPolicy: OnFailure
          volumes:
          - name: git-key
            secret:
              secretName: git-key
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kops.k8s.io/instancegroup
                    operator: NotIn
                    values:
                    - yolo 
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: scenario
spec:
  schedule: "0 */1 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: jmeter
            image: tombatchelor/scenario:3.0
            imagePullPolicy: Always
            args:
            - -n -t /tests/Scenario.jmx 
          restartPolicy: OnFailure 
          affinity:
            nodeAffinity:
              requiredDuringSchedulingIgnoredDuringExecution:
                nodeSelectorTerms:
                - matchExpressions:
                  - key: kops.k8s.io/instancegroup
                    operator: NotIn
                    values:
                    - yolo 
---
apiVersion: v1
kind: Service
metadata:
  name: mysql-rds
spec:
  type: ExternalName
  externalName: cars-db.ckmymsl26zdw.us-west-2.rds.amazonaws.com
---
apiVersion: v1
kind: Service
metadata:
  name: cars-app
spec:
  selector:
    app: cars_app
  ports:
  - protocol: TCP
    port: 8080
    targetPort: cars-app-port
---
apiVersion: v1
kind: Service
metadata:
  name: cars-web
spec:
  selector:
    app: cars_web
  ports:
  - protocol: TCP
    port: 80
    targetPort: cars-web-port
---
apiVersion: v1
kind: Service
metadata:
  name: insurance
spec:
  selector:
    app: car_insurance
  ports:
  - protocol: TCP
    port: 8000
    targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: car-loan
spec:
  selector:
    app: car_loan
  ports:
  - protocol: TCP
    port: 80
    targetPort: http
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis_session_manager
  ports:
  - protocol: TCP
    port: 6379
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus-cars-app
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: marshaller
rules:
- apiGroups: ["apps", "extensions", ""]
  resources:
  - deployments
  - deployments/scale
  - pods
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-cars-app
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: marshaller
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus-cars-app
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-cars-app
subjects:
- kind: ServiceAccount
  name: prometheus-cars-app
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: marshaller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: marshaller
subjects:
- kind: ServiceAccount
  name: marshaller
  namespace: default
